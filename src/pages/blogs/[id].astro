---
import { isCallChain } from "typescript"
import Layout from "../../layouts/Layout.astro"
export const prerender =  false
const {id} = Astro.params
// let title = ''
// let description = ''

 let blogs =  [
	{   
		id: "1",
		title: "Why we should not use index in v-for? ",
		description:'iphone 13 pro description'
		
	},
	{   
		id: "2",
		title: "Iphone 14 pro",
		description:'iphone 14 pro description'
	},
	{
		id: "3",
		title: "Iphone 15 pro",
		description:'iphone 15 pro description'
	},
]	

let title = ''
let description = ''
blogs.map((el)=> {
  if(el.id === id) {
    title = el.title
    description = el.description
  }
})

---
<Layout title=`${title}`>

  <main>
    <div class="flex justify-center">
      <div id="1" class="w-[1000px] font-jersey text-accent text-left text-4xl mt-16 sm:mt-20 mx-4">
        <div>
          {title}
        </div>
        <div class="font-ubuntu text-xl mt-10 text-gray-400">
            In Vue Js, <span class="text-accent  hover:text-blue-500 cursor-pointer">"v-for"</span>  is definitely one of the most used attribute.
            We use this  all the time to traverse an object or array. Initially, I always used to use index as key.
            <br>
            Recently, I found out why we shouldn't use index as key. Rather, we have to add any unique data as key. It can be any data property from the object
             or it can be created with a value added with the current index. For example if we are traversing through a blog object of array, we can use blog Id
             as index. Or we can use something like :key='blog'+index. Now, question may arise we can't use index straight away as we are using array of objects and index
             of that array will always be unique, right?
             this is cause [add the reason]
             Now, if we move on to a practical example of this scenario

        </div>
      </div>
    </div>
  </main>
</Layout>

<style scoped>

</style>